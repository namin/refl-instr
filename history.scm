(set! set-value! (lambda (var value env)
                   (let ((pair (get var env)))
                     (if (pair? pair)
	                       (set-cdr! pair (cons value (cdr pair)))
	                       (error 'my-set-value!: var 'is 'unbound)))))
(define old-define-value define-value)
(set! define-value (lambda (var value env) (old-define-value var (list value) env)))

(set! eval-var (lambda (exp env cont)
                 (let ((pair (get exp env)))
                   (if (pair? pair)
                       (cont (cadr pair) (plug-in 'var (list exp (cadr pair)) '()))
                       (error 'eval-var (list 'unbound 'variable: exp))))))

(define old-base-eval base-eval)
(set! base-eval (lambda (exp env cont)
                  (if (and (pair? exp) (eq? (car exp) 'history))
                      (let ((pair (get (cadr exp) env)))
                        (if (pair? pair)
                            (cont (cdr pair) (plug-in 'history (list exp (cdr pair)) '()))
                            (error 'eval-history (list 'unbound 'history: exp))))
                      (old-base-eval exp env cont))))
